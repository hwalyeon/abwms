<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	TOKN_KEY Mapper
	Generated by Hubble
-->
<mapper namespace="TOKN_KEY">

	<select id="select" resultMap="SYS.defaultMap">
		/* Generated SQL SQL ID : TOKN_KEY.select */
		SELECT 
               USER_ID /* USER_ID 사용자_ID varchar(50) */
             , CLNT_ID /* CLNT_ID 클라이언트_ID varchar(20) */
             , KEY_VAL /* KEY_VAL 키_값 varchar(32) */
        FROM   TOKN_KEY
		WHERE
		       USER_ID = #{userId} /* USER_ID 사용자_ID varchar(50) */
		AND    CLNT_ID = #{clntId} /* CLNT_ID 클라이언트_ID varchar(20) */
	</select>

	<insert id="insert" >
		/* Generated SQL SQL ID : TOKN_KEY.insert */
		INSERT INTO TOKN_KEY (
		  USER_ID /* USER_ID 사용자_ID varchar(50) */
		, CLNT_ID /* CLNT_ID 클라이언트_ID varchar(20) */
		<if test="keyVal != null">
		, KEY_VAL /* KEY_VAL 키_값 varchar(32) */
		</if>
		) VALUES (
		  #{userId} /* USER_ID 사용자_ID varchar(50) */
		, #{clntId} /* CLNT_ID 클라이언트_ID varchar(20) */
		<if test="keyVal != null">
		, #{keyVal} /* KEY_VAL 키_값 varchar(32) */
		</if>
		)
	</insert>
	
	<update id="update" >
		/* Generated SQL SQL ID : TOKN_KEY.update */
		UPDATE TOKN_KEY
		<trim prefix="SET" prefixOverrides=",">
		<if test="keyVal != null">
		, KEY_VAL = #{keyVal} /* KEY_VAL 키_값 varchar(32) */
		</if>
		</trim>
		WHERE
		USER_ID = #{userId} /* USER_ID 사용자_ID varchar(50) */
		AND    CLNT_ID = #{clntId} /* CLNT_ID 클라이언트_ID varchar(20) */
	</update>
	
	<update id="merge" >
	with upsert as 
	(
		update tokn_key
		set    key_val = #{keyVal}
		where  user_id = #{userId}
		and    clnt_id = #{clntId}
		returning *
	)
	insert into tokn_key
	(
	     user_id
	    ,clnt_id
	    ,key_val
	    ,reg_user_id
	    ,upt_user_id
	)
	select  #{userId}
	       ,#{clntId}
	       ,#{keyVal}
	       ,#{regUserId}
	       ,#{uptUserId}
    where not exists(select * from upsert)
	
	</update>
	
	<update id="mergeMysql" >
		/* Generated SQL SQL ID : TOKN_KEY.merge */
		INSERT INTO TOKN_KEY (
		  USER_ID /* USER_ID 사용자_ID varchar(50) */
		, CLNT_ID /* CLNT_ID 클라이언트_ID varchar(20) */
		<if test="keyVal != null">
		, KEY_VAL /* KEY_VAL 키_값 varchar(32) */
		, REG_USER_ID
		,UPT_USER_ID
		</if>
		) VALUES (
		  #{userId} /* USER_ID 사용자_ID varchar(50) */
		, #{clntId} /* CLNT_ID 클라이언트_ID varchar(20) */
		<if test="keyVal != null">
		, #{keyVal} /* KEY_VAL 키_값 varchar(32) */
		</if>
		,#{regUserId}
		,#{uptUserId}
		)
		ON
			DUPLICATE KEY
		UPDATE
		<trim prefix="" prefixOverrides=",">
		<if test="keyVal != null">
		, KEY_VAL = #{keyVal} /* KEY_VAL 키_값 varchar(32) */
		</if>
		</trim>
	</update>
	
	<delete id="delete" >
		/* Generated SQL SQL ID : TOKN_KEY.delete */
		DELETE FROM TOKN_KEY
		WHERE
		USER_ID = #{userId} /* USER_ID 사용자_ID varchar(50) */
		AND    CLNT_ID = #{clntId} /* CLNT_ID 클라이언트_ID varchar(20) */
	</delete>
</mapper>