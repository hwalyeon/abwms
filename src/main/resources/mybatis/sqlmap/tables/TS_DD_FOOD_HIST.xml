<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	ts_dd_food_hist [TS_일별_식품_이력] Mapper
	Generated by Hubble
-->
<mapper namespace="TS_DD_FOOD_HIST">

	<select id="select" resultType="kr.co.seculink.domain.vo.TsDdFoodHistVo">
		/* Generated SQL SQL ID : ts_dd_food_hist.select */
        SELECT  stnd_dt /* stnd_dt 기준_일자 character(8) */
               ,stdt_no /* stdt_no 학생_번호 numeric */
               ,eat_seq /* eat_seq 섭취_순번 numeric */
               ,food_no /* food_no 식품_번호 numeric */
               ,qty /* qty 수량 numeric */
               ,reg_dt /* reg_dt 등록_일자 character(8) */
               ,reg_tm /* reg_tm 등록_시각 character(6) */
               ,reg_user_id /* reg_user_id 등록_사용자_ID character varying(20) */
               ,upt_dt /* upt_dt 수정_일자 character(8) */
               ,upt_tm /* upt_tm 수정_시각 character(6) */
               ,upt_user_id /* upt_user_id 수정_사용자_ID character varying(20) */
        FROM   ts_dd_food_hist
		WHERE  1 = 1
		AND    stnd_dt = #{stndDt} /* stnd_dt 기준_일자 character(8) */
		AND    stdt_no = #{stdtNo} /* stdt_no 학생_번호 numeric */
		AND    eat_seq = #{eatSeq} /* eat_seq 섭취_순번 numeric */
		AND    food_no = #{foodNo} /* food_no 식품_번호 numeric */
	</select>

	<insert id="insert"  >
		/* Generated SQL SQL ID : ts_dd_food_hist.insert */
		INSERT INTO ts_dd_food_hist
		(
		     stnd_dt /* stnd_dt 기준_일자 character(8) */
		    ,stdt_no /* stdt_no 학생_번호 numeric */
		    ,eat_seq /* eat_seq 섭취_순번 numeric */
		    ,food_no /* food_no 식품_번호 numeric */
		    ,qty /* qty 수량 numeric */
		    ,reg_dt /* reg_dt 등록_일자 character(8) */
		    ,reg_tm /* reg_tm 등록_시각 character(6) */
		    ,reg_user_id /* reg_user_id 등록_사용자_ID character varying(20) */
		    ,upt_dt /* upt_dt 수정_일자 character(8) */
		    ,upt_tm /* upt_tm 수정_시각 character(6) */
		    ,upt_user_id /* upt_user_id 수정_사용자_ID character varying(20) */
		)
		VALUES
		(
		     #{stndDt} /* stnd_dt 기준_일자 character(8) */
		     ,#{stdtNo} /* stdt_no 학생_번호 numeric */
		     ,#{eatSeq} /* eat_seq 섭취_순번 numeric */
		     ,#{foodNo} /* food_no 식품_번호 numeric */
		    ,#{qty} /* qty 수량 numeric */
		    ,to_char(now(), 'YYYYMMDD') /* reg_dt 등록_일자 character(8) */ 
		    ,to_char(now(), 'HH24MISS') /* reg_tm 등록_시각 character(6) */
		    ,#{regUserId} /* reg_user_id 등록_사용자_ID character varying(20) */
		    ,to_char(now(), 'YYYYMMDD') /* upt_dt 수정_일자 character(8) */ 
		    ,to_char(now(), 'HH24MISS') /* upt_tm 수정_시각 character(6) */
		    ,#{uptUserId} /* upt_user_id 수정_사용자_ID character varying(20) */
		)
	</insert>
	
	<update id="update" >
		/* Generated SQL SQL ID : ts_dd_food_hist.update */
		UPDATE ts_dd_food_hist
		<trim prefix="SET" prefixOverrides=",">
		<if test="qty != null">
		    ,qty = #{qty} /* qty 수량 numeric */
		</if>
		    ,upt_dt = to_char(now(), 'YYYYMMDD') /* upt_dt 수정_일자 character(8) */
		    ,upt_tm = to_char(now(), 'HH24MISS') /* upt_tm 수정_시각 character(6) */
		<if test="uptUserId != null">
		    ,upt_user_id = #{uptUserId} /* upt_user_id 수정_사용자_ID character varying(20) */
		</if>
		</trim>
		WHERE  1 = 1
		AND    stnd_dt = #{stndDt} /* stnd_dt 기준_일자 character(8) */
		AND    stdt_no = #{stdtNo} /* stdt_no 학생_번호 numeric */
		AND    eat_seq = #{eatSeq} /* eat_seq 섭취_순번 numeric */
		AND    food_no = #{foodNo} /* food_no 식품_번호 numeric */
	</update>
	
	<update id="merge" >
		/* Generated SQL SQL ID : ts_dd_food_hist.merge */
		INSERT INTO ts_dd_food_hist
		(
		     stnd_dt /* stnd_dt 기준_일자 character(8) */
		     stdt_no /* stdt_no 학생_번호 numeric */
		     eat_seq /* eat_seq 섭취_순번 numeric */
		     food_no /* food_no 식품_번호 numeric */
		    ,qty /* qty 수량 numeric */
		    ,reg_dt /* reg_dt 등록_일자 character(8) */
		    ,reg_tm /* reg_tm 등록_시각 character(6) */
		    ,reg_user_id /* reg_user_id 등록_사용자_ID character varying(20) */
		    ,upt_dt /* upt_dt 수정_일자 character(8) */
		    ,upt_tm /* upt_tm 수정_시각 character(6) */
		    ,upt_user_id /* upt_user_id 수정_사용자_ID character varying(20) */
		)
		VALUES
		(
		     #{stndDt} /* stnd_dt 기준_일자 character(8) */
		     #{stdtNo} /* stdt_no 학생_번호 numeric */
		     #{eatSeq} /* eat_seq 섭취_순번 numeric */
		     #{foodNo} /* food_no 식품_번호 numeric */
		    ,#{qty} /* qty 수량 numeric */
		    ,to_char(now(), 'YYYYMMDD') /* reg_dt 등록_일자 character(8) */
		    ,to_char(now(), 'HH24MISS') /* reg_tm 등록_시각 character(6) */
		    ,#{regUserId} /* reg_user_id 등록_사용자_ID character varying(20) */
		    ,to_char(now(), 'YYYYMMDD') /* upt_dt 수정_일자 character(8) */
		    ,to_char(now(), 'HH24MISS') /* upt_tm 수정_시각 character(6) */
		    ,#{uptUserId} /* upt_user_id 수정_사용자_ID character varying(20) */
		)
		ON CONFLICT ON CONSTRAINT ts_dd_food_hist_pkey
		DO UPDATE SET
		<trim prefix="" prefixOverrides=",">
		<if test="qty != null">
		    ,qty = #{qty} /* qty 수량 numeric */
		</if>
		    ,upt_dt = to_char(now(), 'YYYYMMDD') /* upt_dt 수정_일자 character(8) */
		    ,upt_tm = to_char(now(), 'HH24MISS') /* upt_tm 수정_시각 character(6) */
		<if test="uptUserId != null">
		    ,upt_user_id = #{uptUserId} /* upt_user_id 수정_사용자_ID character varying(20) */
		</if>
		</trim>
	</update>
	
	<delete id="delete">
		/* Generated SQL SQL ID : ts_dd_food_hist.delete */
		DELETE FROM ts_dd_food_hist
		WHERE  1 = 1
		AND    stnd_dt = #{stndDt} /* stnd_dt 기준_일자 character(8) */
		AND    stdt_no = #{stdtNo} /* stdt_no 학생_번호 numeric */
		AND    eat_seq = #{eatSeq} /* eat_seq 섭취_순번 numeric */
		AND    food_no = #{foodNo} /* food_no 식품_번호 numeric */
	</delete>
</mapper>
